<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浅谈并发与并行]]></title>
    <url>%2F2018%2F12%2F14%2F%E6%B5%85%E8%B0%88%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[首先看一下一个很恰当的比喻： 你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。并发的关键是你有处理多个任务的能力，不一定要同时。并行的关键是你有同时处理多个任务的能力。所以我认为它们最关键的点就是：是否是『同时』。（来自知乎，作者：之乎用户，链接）再看一眼权威一点的解释：如果某个系统支持两个或者多个动作（Action）同时存在，那么这个系统就是一个并发系统。如果某个系统支持两个或者多个动作同时执行，那么这个系统就是一个并行系统。并发系统与并行系统这两个定义之间的关键差异在于存在这个词。在并发程序中可以同时拥有两个或者多个线程。这意味着，如果程序在单核处理器上运行，那么这两个线程将交替地换入或者换出内存。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。我相信你已经能够得出结论——“并行”概念是“并发”概念的一个子集。也就是说，你可以编写一个拥有多个线程或者进程的并发程序，但如果没有多核处理器来执行这个程序，那么就不能以并行方式来运行代码。因此，凡是在求解单个问题时涉及多个执行流程的编程模式或者执行行为，都属于并发编程的范畴。摘自：《并发的艺术》 — 〔美〕布雷谢斯。 对于这个问题，我自己也尝试写过一些答案，不过在仔细斟酌之后还是选择只留下这两段前辈写的话，一个清新脱俗简单易懂，一个言之凿凿令人信服。 结合之前写的同步异步、阻塞非阻塞，我们可以看一个比较生动的例子：假设我们要做烧开水，举杠铃100下， 洗衣服这3件事情。123烧开水：准备烧开水（1分钟）， 等开水烧开（8分钟） , 关掉烧水机（1分钟） 举杠铃100下：举杠铃100下（10分钟） 洗衣服：准备洗衣服（1分钟）， 等衣服洗完（5分钟），关掉洗衣机（1分钟） 单核处理器 同步阻塞（非并发） 事情步骤安排：烧水：准备烧开水（1分钟）， 等开水烧开（8分钟） , 关掉烧水机（1分钟）；举杠铃100下：举杠铃100下（10分钟）；洗衣服：准备洗衣服（1分钟）， 等衣服洗完（5分钟），关掉洗衣机（1分钟） 做完3件事，花费的时间t = 1+ 8 +1 + 10 + 1+ 5 +1 = 27（分钟） 异步非阻塞（并发）在等待事情执行时，我（单核）可以切换出去，做别的事情。 事情步骤安排：准备烧开水(1分钟) + 准备洗衣服(1分钟) + 举50下杠铃 (5分钟)+ 关洗衣机（1分钟） + 举杠铃20下（2分钟）+ 关烧水机（1分钟） + 举30下杠铃(3分钟）在等待衣服洗完（5分钟）时，我（单核）执行举50下杠铃（5分钟）；在等待水烧开（8分钟）时，我（单核）执行举50下杠铃 (5分钟)+ 关洗衣机（1分钟） + 举杠铃20下（2分钟）。 做完3件事，花费的时间t = 1 + 1 + 5 + 1 + 2 + 1 + 3 = 14（分钟） 双核处理器 异步并行 核1：准备烧开水（1分钟）+ 举杠铃50下（5分钟）+ 等待（3分钟）+ 关掉烧水机 （1分钟）核2：准备洗衣服（1分钟）+ 举杠铃50下（5分钟）+ 关掉洗衣机（1分钟） + 等待（3分钟）其中，在等待水烧开（8分钟）时，核1执行举杠铃50下（5分钟），等待（3分钟）；在等待衣服洗完（5分钟）时，核2执行举杠铃50下（5分钟）。 做完3件事，花费的时间t = 1 + 5 + 3 + 1 = 10（分钟），其中双核都等待了3分钟。 异步非并行 核1：举杠铃100下（10分钟）核2：准备烧开水（1分钟）+ 准备洗衣服（1分钟）+ 等待（6分钟）+ 关掉烧水机（1分钟）+ 关掉洗衣机（1分钟）其中，在等待水烧开（8分钟）时，核2执行准备烧开水（1分钟），准备洗衣服（1分钟），等待（6分钟）；在等待衣服洗完（5分钟）时，核2执行等待（6分钟）。这里多一句嘴，为什么这里是非并行的？我的理解是，“举杠铃”这一耗时操作在计算机中，是不会一直占用一个cpu核心的，通常cpu只会发号施令告诉这条线程该读写数据了（举杠铃），这个线程则在调用系统IO方法之后等待系统IO读写是否完成的结果的过程中被阻塞，线程所占用的cpu资源立即被释放。所以在本例中，只有在核1发令“举杠铃”的那一刻是并行的，其余时间只有核2在断断续续发号施令，是非并行的，异步主要体现在核1上的线程不会主动等待100下杠铃举完而是进入了休眠，核2上的线程不会主动等待烧开水的结果去洗了衣服，不会主动等待洗衣服的结果进入了休眠，直到这些结果产生时通过往pipe管道写端写入数据来唤醒线程分别占用各自的核心继续工作。 做完3件事，花费的时间t =1 + 1 + 6 + 1 + 1 = 10（分钟） PS：为了更好的描述上述问题，这里我们默认每个核针对上述任务都只能运行一条线程，事实上，支持超线程的单个核心能并行两个线程。 多线程 单核处理器（真单核不支持超线程） 线程1：准备烧开水（1分钟）， 等水烧开（8分钟） , 关掉烧水机（1分钟）线程2：举杠铃100下（10分钟）线程3：准备洗衣服（1分钟）， 等水烧开（5 分钟） , 关掉洗衣机（1分钟）真单核并不是只能开一条线程，它能开启很多条线程，但是核心并不能同时运行对多线程上的任务，为了达到资源最大化利用它要在线程上来回切换。 CPU最理想的切换方式：线程1：准备烧开水（1分钟）+ sleep 1 + sleep 5 + sleep 1 + sleep 2 + 关开水（1分钟）线程2：sleep 1+ sleep 1 + 举杠铃50（5分钟）+ sleep 1 + 举杠铃20（2分钟）+ sleep1 + 举杠铃30下（3分钟）线程3：sleep 1 + 准备洗衣服（1分钟）+ sleep 5 + 关洗衣机（1分钟）最后使用了14分钟，耗时与异步是一样的，印证了我曾经引用的一句话“异步是目的，多线程是手段”。但要注意，实际在计算机中执行这些流程耗时不一定正好是14分钟，因为线程不会按照我们设想的去跑。如果线程2举杠铃先跑，整个流程的速度就下来了。]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>并行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studo制作一个moudle library]]></title>
    <url>%2F2018%2F11%2F15%2FAndroid-Studo%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAlibrary-moudle%2F</url>
    <content type="text"><![CDATA[Android开发过程中，我们或多或少会引用第三方library，那如果我想把自己写的Android库公开，为开源做出一点贡献该怎么办呢？一般有两种方式，一种就是制作一个线上依赖：就像我们常用的gradle依赖，complie ‘xxx’（Android Studio 3.0之后建议使用implementation或api等）；另一种就是将要开源的项目做成一个moudle library直接上传到开源仓库，供别人下载导入，懒人开源，下面简单的介绍一下这种方式（开发IDE为Android Studio）。 假设你的Android工程的可执行程序包名是app（默认都是app），你想将这个app改造成一个library供别人使用，首先进入app目录，打开的build.gradle文件（不是工程根目录下的build.gradle文件），找到如图中的两处。 将apply plugin: ‘com.android.application’修改为apply plugin: ‘com.android.library’。 将android-&gt;defaultConfig下的applicationId “xxx”删除。 删除其他不必要的配置，比如打包、签名等。必要的几项如下图。 此外，你可以将app目录下的build文件、*.iml等临时文件编译删除，然后将整个app目录从工程中移出去，一个新的moudle就诞生了。 PS：本文中的app目录只是假设举例，你可以自由修改这个目录。 相关推荐》Android Studio导入module]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Andoird</tag>
        <tag>Andoird Studio</tag>
        <tag>moudle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android模拟器推荐]]></title>
    <url>%2F2018%2F11%2F15%2FAndroid%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[假如你只做简单调试用,以下的模拟器很方便使用。 Mac OS: 网易mumu 夜神模拟器 Windows: 夜神模拟器 网易mumu 假如你要使用hierarchyviewerd等SDK tools的话，请老老实实使用Android Studio配置一个模拟器。（HierarchyViewer是官方推出优化程序的工具之一，可以帮助我们更好地检视和设计UI）]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>模拟器</tag>
        <tag>阻塞</tag>
        <tag>非阻塞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio常见错误处理]]></title>
    <url>%2F2018%2F11%2F15%2FAndroid-Studio%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[本篇文章主要记录一下Android Studio这款IDE的一些常见的错误处理，有的笔者自己记录，有的偷懒引用大佬们的文章，算是一篇资源汇总的文章吧。 怎么解决Android studio导入项目卡死 Android Studio 编译时提示error please select android sdk android studio的sdk所有方法报错，全部红色警告 安卓studio升级到3.0后，创建项目时报错 Android Studio错误：Connect to 127.0.0.1:1080 [/127.0.0.1] failed: Connection refused: connect]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Andoird</tag>
        <tag>Andoird Studio</tag>
        <tag>常见错误</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio常用功能设置]]></title>
    <url>%2F2018%2F11%2F15%2FAndroid-Studio%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[本篇文章主要记录一下Android Studio这款IDE的一些常用的功能设置，包括但不局限于自动包管理、热调试、字体大小颜色配置等。 File-&gt;Settings打开设置窗口，快捷键是ctrl+alt+S 自动包管理自动导入缺失包、删除无用包 热调试快速调试，无需每次重新打包安装 软件主题、字体设置 开启文档提示 显示行号 自动折叠 代码字体、配色设置 编写Android程序最常用的是Java语言，所以这里特意说下Java的配色：另外注意还有几个配色经常用到如下图： 编码设置编码的设置非常重要。这里建议所用的编译器均设置为UTF-8编码，以兼容中文，否则出现乱码。像Eclipse系列的编译器默认是GBK编码，如果直接移植到默认编码是UTF-8的AndroidStudio上，就会出现中文乱码。 工具栏功能按钮设置 如果想便捷地在工具栏直接使用功能，可以参考如下设置： 添加一个自带默认图标的功能按钮，以设置按钮为例： 右键工具栏空白处，在弹出的窗口里选择自定义… 可以看到我那个设置按钮已经存在了，现在为了示范，我在那个安卓小绿人后面再添加一个设置按钮： 添加无默认图标的功能按钮有些功能系统是没有预置图标的，添加时，操作步骤大体与s上面一致，唯一不同的是，这里需要给你添加的按钮设置一个很小的图标，图标路径可以自定。]]></content>
      <categories>
        <category>Andoird</category>
        <category>Andoird Studio</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
        <tag>设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio新建/导入第一个工程]]></title>
    <url>%2F2018%2F11%2F14%2FAndroid-Studio%E6%96%B0%E5%BB%BA-%E5%AF%BC%E5%85%A5%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[终于可以大展身手了！本文着重讲解一下用Android Studio新建、导入工程项目、导入moudle等，可照目录按需查看。-&gt;-&gt; 新建一个工程目录 直接看图吧，图中有标注，按照步骤来一定错不了。我们的新项目算是建立好了，现在我们来运行一下USB连接手机和电脑，手机在设置里打开“开发者选项”-&gt;“USB调试”。（不同的手机进入开发者选项有所区别，大家自行搜索）点击图中绿色三角图标，在弹出的窗口中选择刚刚连接到电脑的手机，点击ok，静静等候。手机会自动安装上app（有的手机需要手动确认安装），并自动打开。如图，可以看到熟悉的“Hello World!”。 （如果你的三角图标是灰色，请看本章注意事项）大功告成，Android开发已经完全走通了一遍，接下来就看个人的发挥了！大家一起进步呀！。 导入Gradle项目直接在Android Studio的工作页面点击File菜单，选择“New”-&gt;“import project”（当然欢迎页面也有这个选项） 选择你要导入的项目，点击OK，Android Studio会提示我们是在当前窗口打开，还是新建窗口打开，请自行定夺，之后就是等待了，倘若等待过久，一直卡在“Gradle Build Running”请看本章注意事项。 导入moudle当你需要引用别人的library怎么办呢？这里提供三种常用的方案： 1.通过gradle远程依赖下载Jar包，需连外网。gradle依赖可见build.gradle文件中的dependencies {}，implementation/api…等等不做赘述。2.直接导入下载好的Jar包。3.另外就是下载好Android项目，直接离线作为moudle导入。下面详细介绍一下这种导入方式。 导入moudle有两种方式，一是通过AS的工具导入，二是改写配置代码。 AS工具导入 点击File菜单，选择“New”-&gt;“import Moudle”。 选择要导入的moudle目录（若不确定被导入的目录是不是一个正确的mouble，你可以查看本站另一篇文章Android Studo制作一个library moudle）。 打开工程结构窗口，选中当前项目下的主模块（一般默认是app）。切换到dependencies选项卡，点击图中的“+”选择“Module dependency”。 选择moudle，点击ok。成功导入! 代码导入（推荐!!第一种方式的实质就是AS自动生成了代码） 首先打开工程根目录下的setting.gradle，按照下图改写。 打开当前项目下的主模块（一般默认是app）目录下的build.gradle文件，按照下图改写。 导入Eclipse工程导入Eclipse工程，写起来的话，篇幅也很大，这里偷个懒，大家可以去看看这篇博客，写的挺详细的。 Android Studio导入Eclipse项目的两种方法 注意事项 在新建和导入项目的时候，总会不是一帆风顺的，要么久久等候卡着不动、要么这里报错那里报错根本运行不起来……为了解决问题，我们需要打交道的文件总逃不出这几个。下面是笔者收集的一些问题，大家可以对号入座。怎么解决Android studio导入项目卡死Android Studio 编译时提示error please select android sdkandroid studio的sdk所有方法报错，全部红色警告安卓studio升级到3.0后，创建项目时报错]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android SDK安装配置]]></title>
    <url>%2F2018%2F11%2F14%2FAndroid-SDK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[概念 SDK tools SDK tools即Google官方推出的SDK工具集合，有安装版和解压版。一个纯净的SDk tools目录如下图，此目录就是Android Studio等IDE要配置的SDK根目录，但是此目录还缺少一些东西，需要SDK Manager和AVD Manager去下载安装。以下介绍的都是SDK的子工具包，将所有的子包综合起来就是名副其实的Android SDK(安卓开发工具集)了。 tools 针对pc平台下使用的工具：比如模拟器，.9patch工具，性能追踪可视化工具traceview；还有Android系统api，针对不同的系统api，对接口和性能做了调整，是Android sdk的核心，所以有时也认为tools就是上面所说的SDK tools（傻傻分不清楚），在SDK Manager中对应图中标记①。 platform-tools 针对pc端和移动端进行交互的一些工具：比如adb工具（通过该工具pc端获取移动端log信息），sqlite3工具（通过该工具查询移动端数据库信息），在SDK Manager中对应图中标记②。 build tools aapt工具，aidl工具和打包工具（apkbuilder,dex工具），在SDK Manager中对应图中标记③。 1234aapt编译资源文件得到二进制xml和R.Java aidl工具将aidl文件--Java interface javac：R.java +java interface + application source code+thrid jar-&gt;class.dex文件 apkbuilder：class.dex+binary resouce+other resouce---&gt;xx.apk platform 所有版本的API都存放在这里，统一命名为android-xx。你在写Android代码时调用的android包下的API都来自此。如图中标记④。 source 各版本的API源代码，目录下文件命名与platform一致并与其一一对应⑤。 下载安装 点击下载，Windows系统下有安装版和解压版，选择一种下载。安装版请点击exe程序完成安装，解压版直接解压到一个目录即可。此目录就是Android SDK目录了。 上面下载的工具包还需要完善一下，接下来打开SDK Manager安装一些Android开发必要的资源。哪些必需安装、哪些不必要安装见下图。 &gt;&gt;看不清的图片可在新标签打开查看大图 Android Studio对SDK根目录的改动 有些细心的同学在使用Android Studio编辑工具一段时间后，去手动打开SDK Manager.exe之后会发现它会闪退，怎么都打不开，别慌，这是因为Android Studio对你的sdk目录做了一些改动，尤其是tools目录下的东西。这里大家可以去查看一下这篇博客，有对应的解决方案。 android SDK SDK Manager.exe 无法打开，一闪而过最终解决办法]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Studio安装配置]]></title>
    <url>%2F2018%2F11%2F13%2FAndroid-Studio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 Android SDK你装或者不装都可以进行Android Studio(简称AS)的安装配置。只不过装过SDK的且已经用过Android SDK Manager的同志在进行以下配置之后，可能也许大概会遇见一个问题，你会发现你的SDK Manager.exe程序再也打不开了，双击只会闪退。这并不会影响AS的使用，AS3.0之后完全取消了独立的SDK Manager，将其完全整合到内部，一切操作都可以在AS内部完成！Android SDK在AS内部的配置可以查看Andorid Studio常用功能设置。废话说的有点多，下面正文开始。 下载安装 点击链接下载安装，目前最新版本3.2.0。默认是64位的，如果是要32位的，从“选择其他平台“中找到Windows(32-bit)。 下载完成之后，打开安装包首先会提示你选择要安装的组件，“Android Virtual Device”是Android虚拟机，我这里没有选择安装。初次运行设置 打开软件进行配置，会让你选择1.从现有的文件导入设置。2.不导入设置。这里我们选择默认选项（第二项），点击OK进行下一步。 此时会提示你“访问不到SDK的位置”，此时点击cancel，有时会出现“Finding Available SDK…”提示框，请稍等一会进入第三步。 出现欢迎页面，点击next。 提示选择你想要设置(安装)的类型。1.标准设置2.自定义设置。这里推荐选择第二项自定义设置，进入第5步。(事实证明这一步无论选什么都会进入第五不、第六步)。 选择主题样式。这里笔者比较喜欢暗黑风格:-) 自定义安装设置，Android SDK/Android SDK Platform这两项默认必选。然后设置一个Android SDK的目录，以后在AS中下载的SDK都会放在这个目录；后两项看情况勾选，一个是Intel硬件加速、一个是自带的安卓模拟器。(AS的模拟器有点慢，我没有安装，用模拟器的话可以看看Android模拟器推荐) 最终的确认页面，点击Finish，等待安装配置完成。 出现这个页面，AS的安装就大功告成了！Congratulations! 相关推荐Android Studio新建/导入第一个工程]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java开发环境配置]]></title>
    <url>%2F2018%2F11%2F13%2FJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言 在Java中，类库以包（package）的形式提供，不同版本的Java提供不同的包，以面向特定的应用。Java2平台包括标准版（J2SE）、企业版（J2EE）和微缩版（J2ME）三个版本。 Java SE(Java Platform,Standard Edition)。JavaSE以前称为J2SE.它允许开发和部署在桌面、服务器、嵌入式环境和实施环境中使用的Java应用程序。JavaSE 包括支持Java Ｗeb服务开发的类，并为Java Platform,Enterprise Edition(Java EE)提供基础。 Java EE(Java Platform.Enterprise Edition)。这个版本以前被称为J2EE.企业版本帮助开发和部署可移植、健壮、可伸缩切安全的服务端Java应用。Java EE是在JavaSE的基础上构建的他提供Web 服务、组建模型、管理和通信API.可以用来实现企业级的面向服务体系结构(service-oriented architecture,SOA)和web2.0应用程序。 Java ME(Java Platform,Micro Edition)。Java ME为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME包括灵活的用户界面、健壮的安全模式、许多内置的网络协议以及对于动态下载的连网和离线应用程序的丰富支持。基于Java ME规范的应用程序只需要编写一次，就可以用于许多设备，而且可以利用每个设备的本级功能。 搭建Java开发环境一般需要同时安装JDK和JRE。 JDK：指Java开发工具包Java Development Kit，开发Java程序时必需，JDK里包含一部分公共JRE。JRE：一个Java运行环境Java Runtime Environment，运行已开发的Java程序时所用。 请按照需求安装，本文选取JavaSE JDK8 进行Windows10环境下的安装演示。 下载安装 点击下载链接，进入官网下载页面。依次点击下图中的下载按钮下载JDK。（64位操作系统可安装x86版、x64版，32位操作系统只能安装x86版）。 下载完成后，请自行安装，安装过程中的JDK和JRE的路径请务必记住，在后续的环境配置中需要用到，路径如下图。 配置环境变量 Java环境变量涉及到三个名词：JAVA_HOME、path、classpath。 JAVA_HOME代表JDK安装主目录，path代表JDK下可执行文件目录，classpath代表运行java程序时需要查找class文件的目录。 依据上面的安装步骤，应该这样设置： 依次点击“右键我的电脑” -&gt; “属性” -&gt; “高级系统设置” -&gt; “高级” -&gt; “环境变量”，打开环境变量设置窗口。以下各项，有已存在的环境变量，直接编辑其值，切勿全盘覆盖；不存在的自己新建。 JAVA_HOME：D:\DevelopTools\JAVA\JDK path：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（注意其中的分号，Windows10有“新建”按钮可忽略分号） classpath：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;（注意最前面的点代表当前路径，JDK1.5之后classpath可忽略）至此，我们已经完成了Java开发环境的安装和配置。 测试 最后，我们来测试一下以上操作是否都已成功生效。打开命令行终端，PowerShell或者CMD等都行。(win+X,A)输入java -version回车、javac等等只要有窗口有类似的输出，即说明我们已经成功了！Congratulations!]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始学Android——Android开发环境搭建]]></title>
    <url>%2F2018%2F11%2F13%2FAndroid%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[&gt;&gt;看不清的图片可在新标签打开查看大图 为了便于检索，各小节分篇谈论，请按先后顺序，选择自己需要的部分阅读即可。本文推荐开发IDE使用Android Studio。 站内链接 Java开发环境配置 Android SDK安装配置(&lt;-IDE用Android Studio的话可以直接看3) Android Studio安装配置(&lt;-无需提前安装Android SDK) Android Studio新建/导入第一个工程 Android Studio常用功能设置 Android Studio常见错误处理 Android模拟器推荐]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈同步、异步与阻塞、非阻塞]]></title>
    <url>%2F2018%2F11%2F12%2F%E6%B5%85%E8%B0%88%E5%90%8C%E6%AD%A5%E3%80%81%E5%BC%82%E6%AD%A5%E4%B8%8E%E9%98%BB%E5%A1%9E%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E%2F</url>
    <content type="text"><![CDATA[同步、异步与阻塞、非阻塞这四个词，程序员们都不陌生，奇怪的是，每次遇见它们，如果你翻阅资料仔细斟酌，就总会有一些新的心得体会。下面将记录一些东西帮助自己更好的理解他们，争取早日彻底吃透它们。 同步与异步同步与异步这两个概念，大多数情况下同步与异步都是关注消息通信机制 (同步通信synchronous communication/异步通信asynchronous communication)。简而言之同步与异步的区分就是看消息通知的差别。笔者建议初学者在理解同步与异步的时候不要考虑什么多线程、并发并行、阻塞非阻塞云云，我们只根据消息通信机制来区分它们！ 概念描述所谓同步，就是当前线程在发起一个调用时，没有得到结果之前，该调用就不返回。一旦调用返回，此线程就得到返回值了。换句话说，就是由调用者主动等待这个调用的结果。而异步则是相反，调用在发出之后，这个调用就直接返回了，但并没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。（引用自知乎，作者：严肃，链接） 场景比喻举个例子，比如我去银行办理业务，可能会有两种方式 选择排队等候； 另种选择取一个小纸条上面有我的号码，等到排到我这一号时由柜台的人通知我轮到我去办理业务了； 第一种：前者(排队等候)就是同步等待消息通知，也就是我要一直在等待银行办理业务情况；第二种：后者(等待别人通知)就是异步等待消息通知。在异步消息处理中，等待消息通知者(在这个例子中就是等待办理业务的人)往往注册一个回调机制，在所等待的事件被触发时由触发机制(在这里是柜台的人)通过某种机制(在这里是写在小纸条上的号码，喊号)找到等待该事件的人。（引用自简书，作者：猿码道，链接） 阻塞与非阻塞阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。同样的，笔者建议初学者在理解阻塞和非阻塞的时候先不要考虑多线程、并发并行什么的，我们只根据等待调用结果时的状态来区分它们！ 概念描述阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。（引用自知乎，作者：严肃，链接） 场景比喻继续上面的那个例子，等待者除了等待消息通知之外不能做其它的事情，那么该机制就是阻塞的，表现在程序中,也就是该程序一直阻塞在该函数调用处不能继续往下执行。相反，有的人喜欢在银行办理这些业务的时候一边玩手机聊天看视频一边等待，这样的状态就是非阻塞的，因为他(等待者)没有阻塞在这个消息通知上，而是一边做自己的事情一边等待。不论你是排队还是使用号码等待通知，只要你在等待的时候干了别的事情（比如玩手机）那你就是非阻塞机制，也就是说同步机制可以阻塞也可非阻塞的，异步也是如此。 但是需要注意了，同步非阻塞形式实际上是效率低下的，想象一下你一边看视频一边还需要抬头看到底队伍排到你了没有。如果把看视频和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的；而异步非阻塞形式却没有这样的问题，因为看视频是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。（引用自简书，作者：猿码道，链接） 同步/异步与阻塞/非阻塞值得注意的是当我们将同步/异步和阻塞/非阻塞这两组机制放在一起讨论的时候，通常我们都是在思考用何种机制去完成一些耗时的操作，比如本地IO读写、网络请求（Socket请求、Http请求，实质上也是IO）、数据库读写（实质上也是IO）。当我们去搜寻相关资料的过程中会发现，很多前辈都将同步异步、阻塞非阻塞与IO放在一起讨论。这篇文章很好的解决了我的疑问关于网络IO中的同步、异步、阻塞、非阻塞。 我们已知同步阻塞、同步非阻塞、异步阻塞、异步非阻塞四种状态都存在，那么它们之间到底有何不同？同步阻塞和异步非阻塞还好说，同步非阻塞和异步阻塞到底以何种方式存在？有何意义吗？ 同步阻塞效率低，拿上面的例子来说，就是你专心排队，什么别的事都不做。存在方式和意义：一般情况下，Linux环境下未设置O_NONBLOCK标志位的IO读写操作（调用系统recvfrom方法）都是同步阻塞的。同步阻塞机制下的调用只有正确获取返回值程序才能继续执行，确保了任务流程的安全性。 异步阻塞效率低，甚至有点蠢。如果在银行等待办理业务的人采用的是异步的方式去等待消息被触发（通知），也就是领了一张小纸条，假如在这段时间里他不能离开银行，也不能做其它的事情，那么很显然，这个人被阻塞在了这个等待的操作上面。 异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。在上述例子中，假如你采用了异步阻塞机制，在通知你去办业务之前这一段时间你只能呆坐着，即一直处于阻塞状态，一旦通知消息到达，立即解除阻塞去办业务。 存在方式和意义：实际应用中基本不会用到异步阻塞机制，因为很蠢。若是用简单回调（观察者模式）、任务队列的方法实现的异步，那么异步阻塞与同步阻塞没什么两样。倘若是用多线程的方式实现的异步，异步阻塞显得更愚蠢了，因为它完成跟同步阻塞一样的工作却多消耗一了些资源（新开了线程）。 同步非阻塞实际上是效率也是很低下的。想象一下你一边看视频一边还需要抬头看到底队伍排到你了没有，如果把打电话和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的。存在方式和意义：最广为人知的应该就是read/write对fd设置O_NONBLOCK标志位，让读/写操作变成非阻塞的，但是还是需要当前线程频繁去确定是否完成的flag（同步消息）。 异步非阻塞效率最高，也是客户端应用开发中处理耗时操作最常用的方法。在上例中，因为看视频是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。又比如说，这个人突然发觉自己烟瘾犯了，需要出去抽根烟，于是他告诉大堂经理说，排到我这个号码的时候麻烦到外面通知我一下(注册一个回调函数)，那么他就没有被阻塞在这个等待的操作上面，自然这个就是异步+非阻塞的方式了。存在方式和意义：异步确保了当前调用能够得到有效返回，非阻塞确保了不会在消耗时间在无意义的傻等，理论上是处理耗时操作最好的机制。当然这里只是说理论上，前提是操作系统提供相关支持、确保线程足够安全的情况下。 再举一个例子对上面所讲的概念再次进行一个场景梳理，上面已经明确说明，同步/异步关注的是消息通知的机制，而阻塞/非阻塞关注的是程序（线程）等待消息通知时的状态。以小明下载文件打个比方，从这两个关注点来再次说明这两组概念，希望能够更好的促进大家的理解。 同步阻塞：小明一直盯着下载进度条，到 100% 的时候就完成。 同步体现在：等待下载完成通知；阻塞体现在：等待下载完成通知过程中，不能做其他任务处理； 同步非阻塞：小明提交下载任务后就去干别的，每过一段时间就去瞄一眼进度条，看到 100% 就完成。 同步体现在：等待下载完成通知；非阻塞体现在：等待下载完成通知过程中，去干别的任务了，只是时不时会瞄一眼进度条；【小明必须要在两个任务间切换，关注下载进度】 异步阻塞：小明换了个有下载完成通知功能的软件，下载完成就“叮”一声。不过小明仍然一直等待“叮”的声音（看起来很傻，不是吗）。 异步体现在：下载完成“叮”一声通知；阻塞体现在：等待下载完成“叮”一声通知过程中，不能做其他任务处理； 异步非阻塞：仍然是那个会“叮”一声的下载软件，小明提交下载任务后就去干别的，听到“叮”的一声就知道完成了。 异步体现在：下载完成“叮”一声通知；非阻塞体现在：等待下载完成“叮”一声通知过程中，去干别的任务了，只需要接收“叮”声通知即可；【软件处理下载任务，小明处理其他任务，不需关注进度，只需接收软件“叮”声通知，即可】 也就是说，同步/异步是“下载完成消息”通知的方式（机制），而阻塞/非阻塞则是在等待“下载完成消息”通知过程中的状态（能不能干其他任务），在不同的场景下，同步/异步、阻塞/非阻塞的四种组合都有应用。所以，综上所述，同步和异步仅仅是关注的消息如何通知的机制，而阻塞与非阻塞关注的是等待消息通知时的状态。也就是说，同步的情况下，是由处理消息者自己去等待消息是否被触发，而异步的情况下是由触发机制来通知处理消息者，所以在异步机制中，处理消息者和触发机制之间就需要一个连接的桥梁： 在银行的例子中，这个桥梁就是小纸条上面的号码。在小明的例子中，这个桥梁就是软件“叮”的声音。 总结 客户端开发（桌面应用、原生APP、js应用等）中处理网络请求、本地文件和数据库读取等耗时操作时常说的同步异步无需考虑阻塞非阻塞的问题，基本上，这里的同步都是阻塞的，异步都是非阻塞的。 服务端开发，尤其是Socket WebServer（网络游戏、银行支付等需要长连接或者绝对安全性的服务端开发）中，需要考虑高并发的时候，同步异步需要与阻塞非阻塞一起考虑，通常都是考虑同步阻塞IO（BIO,non-blocking IO）、同步非阻塞IO（NIO,non-blocking IO）、异步非阻塞IO(AIO,asynchronous I/O)，没有异步阻塞IO。 说说多线程，有很多人在讨论这些问题的时候总喜欢在线程上钻牛角尖（包括我自己），其实我们只需记住一句话便能减少很多烦恼————“异步是目的，多线程是手段”。什么意思呢？多线程是实现异步的一种手段，异步还可以通过其他方式实现，比如消息循环、任务队列、回调等，当然有的编程语言或者操作系统会提供封装好的消息循环、任务队列等组件，这些组件多半是由多线程实现的。 所有的程序最终都会由计算机硬件来执行，所以为了更好的理解异步操作的本质，我们有必要了解一下它的硬件基础。熟悉硬件的朋友肯定对DMA(Direct Memory Access)这个词不陌生，硬盘、光驱的技术规格中都有明确DMA的模式指标，其实网卡、声卡、显卡也是有DMA功能的。DMA就是直接内存访问的意思，也就是说，拥有DMA功能的硬件在和内存进行数据交换的时候可以不消耗CPU资源。只要CPU在发起数据传输时发送一个指令，硬件就开始自己和内存交换数据，在传输完成之后硬件会触发一个中断来通知操作完成。这些无须消耗CPU时间的I/O操作正是异步操作的硬件基础。所以即使在DOS这样的单进程（而且无线程概念）系统中也同样可以发起异步的DMA操作。 以上总结皆为笔者个人臆断，仅供参考，若有异议欢迎指出，共同进步！]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>阻塞</tag>
        <tag>非阻塞</tag>
        <tag>同步</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员的自我修养]]></title>
    <url>%2F2018%2F11%2F12%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%2F</url>
    <content type="text"><![CDATA[写在前面无论是笔试、面试还是日常工作中总是会遇到同步、异步、并行、并发、多线程等等的问题，在做简单的项目的时候也不会过于关心这些感念，只管会用就行，其实仔细想想自己对这些概念其实还是没有完全清晰的认识，说了解也了解，总能说上几句听起来不错的话，但是禁不起刨根问底，尤其是再加上阻塞、非阻塞等概念之后，一时间总感觉信息量太大处理不过来。查看了许多前辈的讲解之后对这些东西也有一些浅薄的理解，现在记录下来，日后忘之也好来寻。 汇总链接 浅谈同步、异步与阻塞、非阻塞]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Android Studio,记一次难忘的Error]]></title>
    <url>%2F2018%2F01%2F31%2FAndroid-Studio-%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9A%BE%E5%BF%98%E7%9A%84Error%2F</url>
    <content type="text"><![CDATA[今天打开上周才运行过的Android项目,意想不到的错误出现了： Could not find method ?apply()for arguments [{plugin=com.android.application}]…… 同样的 Gradle报错:Gradle DSL method not found: ‘apply()’…… 当时的环境及版本信息： Android Studio版本3.0 build.gradle(工程根目录) 版本3.0.0 gradle-wrapper.properties:distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip` 点击Message定位到某module下的build.gradle文件的第一行:apply plugin: ‘com.android.application’ 本来以为靠着万能的google就能很快解决问题，结果莫名其妙就耽误了半个下午. 尝试过的解决方案： 删除allprojects后边的生成的多余android {……}，dependencies{……} 更改根目录下build.gradle中的classpath的gradle版本 svn diff/svn update 将Android studio版本降到2.4再尝试上述过程 …… 全军覆没，就差最后一步delete之，然后svn checkout重建项目了。 现在想想真是浪费时间啊，为了增强一下记忆，我把这个错误记下来分享一下。 究极解决方案就是 复制对应moudle下的build.gradle内容，删除掉该build.gradle文件，新建之，粘贴之,最后rebuild一下，应该就没有什么问题了。]]></content>
      <categories>
        <category>Android</category>
        <category>Android Studio</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题配置透明色等]]></title>
    <url>%2F2018%2F01%2F31%2Fnext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E9%80%8F%E6%98%8E%E8%89%B2%E7%AD%89%2F</url>
    <content type="text"><![CDATA[写在前面博客搭建基础相关、hexo安装配置、next主题安装配置等可以参考这两篇文章： 从零开始搭建个人博客: 建立博客系列更炫酷的效果看这个: hexo的next主题个性化教程:打造炫酷网站 这篇博文主要对next主题配置做一些简单的补充，我用的主题是Next.Gemini v6.0.0版本，所以本文多是关于此主题背景色的修改等。具体效果可以查看我的博客以下命名可能不准确，同学们可以参照我截的一张图：其他next主题大同小异，找不到修改文件的同学可以留言。 背景色透明文章背景色透明打开文件themes/next/source/css/_schemes/Gemini/index.styl，找到1234567// Post &amp; Comments blocks..post-block &#123; padding: $content-desktop-padding; background: white; box-shadow: $box-shadow-inner; border-radius: $border-radius-inner;&#125; 在其后加入一段：123.post-block &#123; background: rgba(255,255,255,.75) none repeat scroll !important;&#125; Tips：这里学过css的同学都知道rgba的第四个参数是改变透明度的，越接近0透明度越高，大家可以自行选择。之后hexo g，hexo d 打开博客即可看到文章背景板已经变透明了。 评论区背景色透明评论区背景色设置同上 文章背景色透明，进入同一级目录，打开index.styl，与前面不同的是你需要找到.comment{…}，同样的在其后插入刚才一样的代码，注意此处插入的样式名是comment。 头部空隙设置Next.Gemini默认的头部空隙是黑色的，它的配置代码在themes/next/source/css/_variables/base.styl的200多行处1234// Headband// --------------------------------------------------$headband-height = 3px$headband-bg = transparent 在这里调整头部空隙的高度和背景色，我将背景色设置成了透明。 标题区设置标题背景色设置代码在/next/source/css/_schemes/Pisces/_brand.styl，找到123456789101112.site-meta &#123; padding: 20px 0; color: white; background: rgba(0,0,0,.3); +tablet() &#123; box-shadow: 0 0 16px rgba(0,0,0,.5); &#125; +mobile() &#123; box-shadow: 0 0 16px rgba(0,0,0,.5); &#125;&#125; 其中background即为title背景色，我这里是设置成黑色透明。 标题字体设置，在themes/next/source/css/_custom/custom.styl中添加如下代码：12345678@font-face &#123; font-family: simi; src: url('/fonts/simi.otf');&#125;.site-title &#123; font-size: 40px !important; font-family: 'simi' !important;&#125; 侧栏概览设置圆形头像设置在本文开头的 打造炫酷网站。 刚刚设置到这一步的同学看到的侧栏图： 可能看到的不是这个样子，不要急，那是因为你的“分类”和“标签”都还是空的，发一篇文章打上标签并分类，之后hexo g,hexo d就能看见了。 透明背景设置，类似于文章背景色透明，在themes/next/source/css/_schemes/Pisces/_sidebar.styl中找到.sidebar-inner {…}在其后添加上面提过的透明样式代码。这里需要注意一下，有些同学在侧栏开启了”显示当前垂直位置百分比”scrollpercent或者”点击回到顶部”b2t功能之后，会出现下拉到顶部透明才产生作用的现象，此时可以尝试 进入themes/next/source/css/_variables/Gemini.styl将$body-bg-color设置为transparent(透明)。 （scrollpercent、b2t这两个功能在主题配置文件themes/next/_config.yml设置，如下：）]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>透明</tag>
      </tags>
  </entry>
</search>
